include(${CMAKE_CURRENT_LIST_DIR}/flags_functions.cmake.txt) 

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS} --std=c++11 -Wunused-result -fPIC -fmax-errors=3 -fpermissive -ggdb")
set(CUDA_NVCC_FLAGS "${CUDA_NVCC_FLAGS} -expt-extended-lambda -ftemplate-backtrace-limit=2 -lineinfo --std=c++11")
set(CUDA_PROPAGATE_HOST_FLAGS OFF)

if(BUILD_RELEASE OR CMAKE_BUILD_TYPE STREQUAL "Release") #RELEASE 
  add_flags(CMAKE_CXX_FLAGS "-fopenmp -O2 -DPARALLEL -ffast-math -DNDEBUG")
  add_flags(CUDA_NVCC_FLAGS "-O2 -keep -src-in-ptx -DNDEBUG")
	# warn about local memory and register spills
	add_flags(CUDA_NVCC_FLAGS "-Xptxas -warn-lmem-usage -Xptxas -warn-spills")
	set(CMAKE_BUILD_TYPE "Release")
else() # DEBUG
	add_flags(CMAKE_CXX_FLAGS "-ggdb")
	# debug and and device code stack range checking
	add_flags(CUDA_NVCC_FLAGS "-G -g -keep -src-in-ptx -pg -Xptxas -g")
	set(CMAKE_BUILD_TYPE "Debug")
endif()
 
#SET( CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -rdynamic" )
#set(CUDA_SEPARABLE_COMPILATION ON)

set(BUILD_SHARED_LIBS true)

include(${CMAKE_CURRENT_LIST_DIR}/custom_settings.cmake.txt OPTIONAL)

cleanup_flags(CUDA_NVCC_FLAGS CUDA_NVCC_FLAGS)

message("COMPILER FLAGS:")
message(STATUS "CMAKE_CXX_FLAGS= ${CMAKE_CXX_FLAGS}")
message(STATUS "CUDA_NVCC_FLAGS= ${CUDA_NVCC_FLAGS}")
message(STATUS "CUDA_PROPAGATE_HOST_FLAGS= ${CUDA_PROPAGATE_HOST_FLAGS}")
